{# NEVER DELETE EXTENDS, IT CAN BREAK THE INTERNET! #}
{# Extending KNP menu layout bundle, until you have installed all dependecies, it will tells you that its not used/missing #}
{% extends '@KnpMenu/menu.html.twig' %}
{# Read above #}

{% macro attributes(attributes) %}
    {% for name, value in attributes %}
        {%- if value is not none and value is not same as(false) -%}
            {{- ' %s="%s"'|format(name, value is same as(true) ? name|e : value|e)|raw -}}
        {%- endif -%}
    {%- endfor -%}
{% endmacro %}

{#{% block compressed_root %}#}
    {#{% spaceless %}#}
        {#{{ block('root') }}#}
    {#{% endspaceless %}#}
{#{% endblock %}#}

{#{% block root %}#}
    {#{% set listAttributes = item.childrenAttributes %}#}
    {#{{ block('list') -}}#}
{#{% endblock %}#}

{#{% block list %}#}

    {#{% if item.hasChildren and options.depth is not same as(0) and item.displayChildren %}#}
        {#{% import _self as knp_menu %}#}
        {#{% set listAttributes = item.childrenAttributes %}#}
        {#<ul {{ knp_menu.attributes(listAttributes) }}>#}
            {#{{ block('children') }}#}
        {#</ul>#}
    {#{% endif %}#}
{#{% endblock %}#}

{#{% block children %}#}
    {# save current variables #}
    {#{% set currentOptions = options %}#}
    {#{% set currentItem = item %}#}

    {# update the depth for children #}
    {#{% if options.depth is not none %}#}
        {#{% set options = options|merge({'depth': currentOptions.depth - 1}) %}#}
    {#{% endif %}#}

    {# update the matchingDepth for children #}
    {#{% if options.matchingDepth is not none and options.matchingDepth > 0 %}#}
        {#{% set options = options|merge({'matchingDepth': currentOptions.matchingDepth - 1}) %}#}
    {#{% endif %}#}

    {#{% for item in currentItem.children %}#}
        {#{{ block('item') }}#}
    {#{% endfor %}#}

    {# restore current variables #}
    {#{% set item = currentItem %}#}
    {#{% set options = currentOptions %}#}
{#{% endblock %}#}

{% block item %}
    {% if item.displayed %}
        {# building the class of the item #}
        {%- set classes = item.attribute('class') is not empty ? [item.attribute('class')] : [] %}

        {%- if matcher.isCurrent(item) %}
            {%- set classes = classes|merge([options.currentClass]) %}
        {%- elseif matcher.isAncestor(item, options.matchingDepth) %}
            {%- set classes = classes|merge([options.ancestorClass]) %}
        {%- endif %}

        {%- if item.actsLikeFirst %}
            {%- set classes = classes|merge([options.firstClass]) %}
        {%- endif %}

        {%- if item.actsLikeLast %}
            {%- set classes = classes|merge([options.lastClass]) %}
        {%- endif %}

        {# Mark item as "leaf" (no children) or as "branch" (has children that are displayed) #}
        {% if item.hasChildren and options.depth is not same as(0) %}
            {% if options.branch_class is not empty and item.displayChildren %}
                {%- set classes = classes|merge([options.branch_class]) %}
            {% endif %}
        {% elseif options.leaf_class is not empty %}
            {%- set classes = classes|merge([options.leaf_class]) %}
        {%- endif %}

        {%- set attributes = item.attributes %}
        {%- set is_dropdown = attributes.dropdown|default(false) %}
        {%- if classes is not empty %}
            {%- set attributes = attributes|merge({'class': classes|join(' ')}) %}
        {%- endif %}

        {# displaying the item #}
        {% import _self as knp_menu %}


        {% set class = "" %}
        {%- if attributes.class is defined %}
            {% set class = attributes.class %}
        {%- endif %}


        {%- if is_dropdown %}
            {%- set attributes = attributes|merge({'class': classes|join(' ')}) %}
            {%- set attributes = attributes|merge({'class': ['li-dropdown']|join(' ')}) %}

            {% set class = "drop-down " ~ class %}

            {% set break = 0 %}

            {% for children in item.children if break == 0 %}
                {% if app.request.getRequestUri() == children.uri %}
                    {%- set attributes = attributes|merge({'class': ['active']|join(' ')}) %}
                    {% set break = 1 %}
                {% endif %}
            {% endfor %}
        {%- endif %}

        {% set liAttributes = {} %}
        {# Custom attributes? #}
        {% if item.attribute('custom-attributes') is not empty %}
            {% set liAttributes = item.attribute('custom-attributes') %}
            {# Merge class if necessary #}
            {% set class = class ~ ( liAttributes.class is defined ? liAttributes.class : "") %}
        {% endif %}
        {# Merge classes #}
        {% set liAttributes = liAttributes|merge({'class': class }) %}

        <li {{ knp_menu.attributes(liAttributes) }}>
            {%- if is_dropdown %}
                {# check whether current URI matches submenu item URI #}
                {% set break = 0 %}

                {% for children in item.children if break == 0 %}
                    {% if app.request.getRequestUri() == children.uri %}
                        {{ block('dropdownElement') }}
                        {% set break = 1 %}
                    {% endif %}
                {% endfor %}

                {% if break == 0 %}
                    {% block dropdownElement %}
                        {% set itemId = item.attribute('id') ?? random() %}
                        <label for="show-drop-{{ itemId }}" class="show-drop">

                            <div class="dropdown-main sidebar-drop">
                                <input type="checkbox" id="show-drop-{{ itemId }}" role="button" />
                                <a class="fix-a" href="#"></a>

                                <div class="a">
                                    <i class="{{ item.attribute('icon') }}"></i>
                                    <span class="sidebar-link-drop">{{ block('label') }}</span>
                                    <span class="trinity-dropdown-icon">
                                        {#<i class="tiecons tiecons-plus-light"></i>#}
                                        {#<i class="tiecons tiecons-minus-light"></i>#}
                                        <i class="tiecons tiecons-arrow-tall-normal-down"></i>
                                        <i class="tiecons tiecons-arrow-tall-normal-up"></i>
                                    </span>
                                </div>
                                <ul class="drop">
                                    {%- set childrenClasses = item.childrenAttribute('class') is not empty ? [item.childrenAttribute('class')] : [] %}
                                    {%- set childrenClasses = childrenClasses|merge(['drop menu_level_' ~ item.level]) %}
                                    {%- set listAttributes  = item.childrenAttributes|merge({'class': childrenClasses|join(' ') }) %}
                                    {{ block('listdropdown') }}
                                </ul>
                            </div>

                        </label>
                    {% endblock %}
                    {#{{ block('linkElement') }}#}
                {% endif %}

            {%- elseif item.uri is not empty and (not matcher.isCurrent(item) or options.currentAsLink) %}
                {{ block('linkElement') }}
                {%- set childrenClasses = item.childrenAttribute('class') is not empty ? [item.childrenAttribute('class')] : [] %}
                {%- set childrenClasses = childrenClasses|merge(['drop menu_level_' ~ item.level]) %}
                {%- set listAttributes = item.childrenAttributes|merge({'class': childrenClasses|join(' ') }) %}
                {{ block('list') }}
            {%- else %}
                {{ block('spanElement') }}
                {%- set childrenClasses = item.childrenAttribute('class') is not empty ? [item.childrenAttribute('class')] : [] %}
                {%- set childrenClasses = childrenClasses|merge(['drop menu_level_' ~ item.level]) %}
                {%- set listAttributes = item.childrenAttributes|merge({'class': childrenClasses|join(' ') }) %}
                {{ block('list') }}
            {%- endif %}
            {# render the list of children #}
        </li>
    {% endif %}
{% endblock %}

{% block linkElement %}
    {% import _self as knp_menu %}

    {% set url = item.uri %}
    {%- set is_dropdown = attributes.dropdown|default(false) %}

    {# make sure dropdown menu links to the first item of its submenu #}
    {% if is_dropdown %}
        {% set break = 0 %}
        {% for children in item.children if break == 0 %}
            {% set url = children.uri %}
            {% set break = 1 %}
        {% endfor %}
    {% endif %}

    <a href="{{ url }}"{{ knp_menu.attributes(item.linkAttributes) }}>
        <i class="{{ item.attribute('icon') }}"></i>
        {% if item.attribute('icon') is not empty %}
        {% endif %}{{ block('label') }}
        {% if is_dropdown %}
            <span class="dropdown-icon">
            </span>
        {% endif %}
    </a>
{% endblock %}

{% block spanElement %}
    {% import _self as knp_menu %}
    <span{{ knp_menu.attributes(item.labelAttributes) }}>
    {% if item.attribute('icon') is not empty %}
        <i class=" {{ item.attribute('icon') }}"></i>
    {% endif %}
        {{ block('label') }}
    </span>
{% endblock %}

{#{% block label %}{% if options.allow_safe_labels and item.getExtra('safe_label', false) %}{{ item.label|raw }}{% else %}{{ item.label }}{% endif %}{% endblock %}#}

{#{% block dropdownElement %}

    <div class="dropdown-main-sidebar">
        {% set itemId = random() %}
        <label for="show-drop-{{ itemId }}" class="show-drop">
            <i class="{{ item.attribute('icon') }}"></i>
            <span class="sidebar-link-drop">{{ block('label') }}</span>
            <span class="dropdown-icon">
                <i class="tiecons tiecons-minus-light"></i>
            </span>
        </label>
        <input type="checkbox" id="show-drop-{{ itemId }}" role="button" checked="checked" disabled="disabled">
        <ul id="dropdown" class="drop">
            {%- set childrenClasses = item.childrenAttribute('class') is not empty ? [item.childrenAttribute('class')] : [] %}
            {%- set childrenClasses = childrenClasses|merge(['drop menu_level_' ~ item.level]) %}
            {%- set listAttributes  = item.childrenAttributes|merge({'class': childrenClasses|join(' ') }) %}
            {{ block('listdropdown') }}
        </ul>
    </div>

{% endblock %}#}

{% block listdropdown %}
    {% if item.hasChildren and options.depth is not same as(0) and item.displayChildren %}
        {% import _self as knp_menu %}
        {{ block('children') }}
    {% endif %}
{% endblock %}

